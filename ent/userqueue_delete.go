// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"spl-users/ent/predicate"
	"spl-users/ent/userqueue"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserQueueDelete is the builder for deleting a UserQueue entity.
type UserQueueDelete struct {
	config
	hooks    []Hook
	mutation *UserQueueMutation
}

// Where appends a list predicates to the UserQueueDelete builder.
func (uqd *UserQueueDelete) Where(ps ...predicate.UserQueue) *UserQueueDelete {
	uqd.mutation.Where(ps...)
	return uqd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uqd *UserQueueDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, uqd.sqlExec, uqd.mutation, uqd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uqd *UserQueueDelete) ExecX(ctx context.Context) int {
	n, err := uqd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uqd *UserQueueDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userqueue.Table, sqlgraph.NewFieldSpec(userqueue.FieldID, field.TypeInt))
	if ps := uqd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uqd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uqd.mutation.done = true
	return affected, err
}

// UserQueueDeleteOne is the builder for deleting a single UserQueue entity.
type UserQueueDeleteOne struct {
	uqd *UserQueueDelete
}

// Where appends a list predicates to the UserQueueDelete builder.
func (uqdo *UserQueueDeleteOne) Where(ps ...predicate.UserQueue) *UserQueueDeleteOne {
	uqdo.uqd.mutation.Where(ps...)
	return uqdo
}

// Exec executes the deletion query.
func (uqdo *UserQueueDeleteOne) Exec(ctx context.Context) error {
	n, err := uqdo.uqd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userqueue.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uqdo *UserQueueDeleteOne) ExecX(ctx context.Context) {
	if err := uqdo.Exec(ctx); err != nil {
		panic(err)
	}
}
