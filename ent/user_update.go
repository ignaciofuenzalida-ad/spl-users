// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spl-users/ent/location"
	"spl-users/ent/predicate"
	"spl-users/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetRun sets the "run" field.
func (uu *UserUpdate) SetRun(i int) *UserUpdate {
	uu.mutation.ResetRun()
	uu.mutation.SetRun(i)
	return uu
}

// SetNillableRun sets the "run" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRun(i *int) *UserUpdate {
	if i != nil {
		uu.SetRun(*i)
	}
	return uu
}

// AddRun adds i to the "run" field.
func (uu *UserUpdate) AddRun(i int) *UserUpdate {
	uu.mutation.AddRun(i)
	return uu
}

// SetVerificationDigit sets the "verification_digit" field.
func (uu *UserUpdate) SetVerificationDigit(s string) *UserUpdate {
	uu.mutation.SetVerificationDigit(s)
	return uu
}

// SetNillableVerificationDigit sets the "verification_digit" field if the given value is not nil.
func (uu *UserUpdate) SetNillableVerificationDigit(s *string) *UserUpdate {
	if s != nil {
		uu.SetVerificationDigit(*s)
	}
	return uu
}

// SetFirstName sets the "first_name" field.
func (uu *UserUpdate) SetFirstName(s string) *UserUpdate {
	uu.mutation.SetFirstName(s)
	return uu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFirstName(s *string) *UserUpdate {
	if s != nil {
		uu.SetFirstName(*s)
	}
	return uu
}

// ClearFirstName clears the value of the "first_name" field.
func (uu *UserUpdate) ClearFirstName() *UserUpdate {
	uu.mutation.ClearFirstName()
	return uu
}

// SetLastName sets the "last_name" field.
func (uu *UserUpdate) SetLastName(s string) *UserUpdate {
	uu.mutation.SetLastName(s)
	return uu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastName(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastName(*s)
	}
	return uu
}

// ClearLastName clears the value of the "last_name" field.
func (uu *UserUpdate) ClearLastName() *UserUpdate {
	uu.mutation.ClearLastName()
	return uu
}

// SetPhoneNumber sets the "phone_number" field.
func (uu *UserUpdate) SetPhoneNumber(s string) *UserUpdate {
	uu.mutation.SetPhoneNumber(s)
	return uu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhoneNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhoneNumber(*s)
	}
	return uu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uu *UserUpdate) ClearPhoneNumber() *UserUpdate {
	uu.mutation.ClearPhoneNumber()
	return uu
}

// SetGender sets the "gender" field.
func (uu *UserUpdate) SetGender(u user.Gender) *UserUpdate {
	uu.mutation.SetGender(u)
	return uu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGender(u *user.Gender) *UserUpdate {
	if u != nil {
		uu.SetGender(*u)
	}
	return uu
}

// SetMaritalStatus sets the "marital_status" field.
func (uu *UserUpdate) SetMaritalStatus(s string) *UserUpdate {
	uu.mutation.SetMaritalStatus(s)
	return uu
}

// SetNillableMaritalStatus sets the "marital_status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMaritalStatus(s *string) *UserUpdate {
	if s != nil {
		uu.SetMaritalStatus(*s)
	}
	return uu
}

// ClearMaritalStatus clears the value of the "marital_status" field.
func (uu *UserUpdate) ClearMaritalStatus() *UserUpdate {
	uu.mutation.ClearMaritalStatus()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// ClearEmail clears the value of the "email" field.
func (uu *UserUpdate) ClearEmail() *UserUpdate {
	uu.mutation.ClearEmail()
	return uu
}

// SetHomeAddress sets the "home_address" field.
func (uu *UserUpdate) SetHomeAddress(s string) *UserUpdate {
	uu.mutation.SetHomeAddress(s)
	return uu
}

// SetNillableHomeAddress sets the "home_address" field if the given value is not nil.
func (uu *UserUpdate) SetNillableHomeAddress(s *string) *UserUpdate {
	if s != nil {
		uu.SetHomeAddress(*s)
	}
	return uu
}

// ClearHomeAddress clears the value of the "home_address" field.
func (uu *UserUpdate) ClearHomeAddress() *UserUpdate {
	uu.mutation.ClearHomeAddress()
	return uu
}

// SetCity sets the "city" field.
func (uu *UserUpdate) SetCity(s string) *UserUpdate {
	uu.mutation.SetCity(s)
	return uu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCity(s *string) *UserUpdate {
	if s != nil {
		uu.SetCity(*s)
	}
	return uu
}

// ClearCity clears the value of the "city" field.
func (uu *UserUpdate) ClearCity() *UserUpdate {
	uu.mutation.ClearCity()
	return uu
}

// SetBirthDate sets the "birth_date" field.
func (uu *UserUpdate) SetBirthDate(t time.Time) *UserUpdate {
	uu.mutation.SetBirthDate(t)
	return uu
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBirthDate(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetBirthDate(*t)
	}
	return uu
}

// ClearBirthDate clears the value of the "birth_date" field.
func (uu *UserUpdate) ClearBirthDate() *UserUpdate {
	uu.mutation.ClearBirthDate()
	return uu
}

// SetExpirationDate sets the "expiration_date" field.
func (uu *UserUpdate) SetExpirationDate(t time.Time) *UserUpdate {
	uu.mutation.SetExpirationDate(t)
	return uu
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (uu *UserUpdate) SetNillableExpirationDate(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetExpirationDate(*t)
	}
	return uu
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (uu *UserUpdate) ClearExpirationDate() *UserUpdate {
	uu.mutation.ClearExpirationDate()
	return uu
}

// SetPlantType sets the "plant_type" field.
func (uu *UserUpdate) SetPlantType(s string) *UserUpdate {
	uu.mutation.SetPlantType(s)
	return uu
}

// SetNillablePlantType sets the "plant_type" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePlantType(s *string) *UserUpdate {
	if s != nil {
		uu.SetPlantType(*s)
	}
	return uu
}

// ClearPlantType clears the value of the "plant_type" field.
func (uu *UserUpdate) ClearPlantType() *UserUpdate {
	uu.mutation.ClearPlantType()
	return uu
}

// SetEmergencyName sets the "emergency_name" field.
func (uu *UserUpdate) SetEmergencyName(s string) *UserUpdate {
	uu.mutation.SetEmergencyName(s)
	return uu
}

// SetNillableEmergencyName sets the "emergency_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmergencyName(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmergencyName(*s)
	}
	return uu
}

// ClearEmergencyName clears the value of the "emergency_name" field.
func (uu *UserUpdate) ClearEmergencyName() *UserUpdate {
	uu.mutation.ClearEmergencyName()
	return uu
}

// SetEmergencyNumber sets the "emergency_number" field.
func (uu *UserUpdate) SetEmergencyNumber(s string) *UserUpdate {
	uu.mutation.SetEmergencyNumber(s)
	return uu
}

// SetNillableEmergencyNumber sets the "emergency_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmergencyNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmergencyNumber(*s)
	}
	return uu
}

// ClearEmergencyNumber clears the value of the "emergency_number" field.
func (uu *UserUpdate) ClearEmergencyNumber() *UserUpdate {
	uu.mutation.ClearEmergencyNumber()
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetExpose sets the "expose" field.
func (uu *UserUpdate) SetExpose(b bool) *UserUpdate {
	uu.mutation.SetExpose(b)
	return uu
}

// SetNillableExpose sets the "expose" field if the given value is not nil.
func (uu *UserUpdate) SetNillableExpose(b *bool) *UserUpdate {
	if b != nil {
		uu.SetExpose(*b)
	}
	return uu
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (uu *UserUpdate) AddLocationIDs(ids ...int) *UserUpdate {
	uu.mutation.AddLocationIDs(ids...)
	return uu
}

// AddLocations adds the "locations" edges to the Location entity.
func (uu *UserUpdate) AddLocations(l ...*Location) *UserUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uu.AddLocationIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearLocations clears all "locations" edges to the Location entity.
func (uu *UserUpdate) ClearLocations() *UserUpdate {
	uu.mutation.ClearLocations()
	return uu
}

// RemoveLocationIDs removes the "locations" edge to Location entities by IDs.
func (uu *UserUpdate) RemoveLocationIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveLocationIDs(ids...)
	return uu
}

// RemoveLocations removes "locations" edges to Location entities.
func (uu *UserUpdate) RemoveLocations(l ...*Location) *UserUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uu.RemoveLocationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Run(); ok {
		if err := user.RunValidator(v); err != nil {
			return &ValidationError{Name: "run", err: fmt.Errorf(`ent: validator failed for field "User.run": %w`, err)}
		}
	}
	if v, ok := uu.mutation.VerificationDigit(); ok {
		if err := user.VerificationDigitValidator(v); err != nil {
			return &ValidationError{Name: "verification_digit", err: fmt.Errorf(`ent: validator failed for field "User.verification_digit": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "User.gender": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Run(); ok {
		_spec.SetField(user.FieldRun, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedRun(); ok {
		_spec.AddField(user.FieldRun, field.TypeInt, value)
	}
	if value, ok := uu.mutation.VerificationDigit(); ok {
		_spec.SetField(user.FieldVerificationDigit, field.TypeString, value)
	}
	if value, ok := uu.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if uu.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := uu.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if uu.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := uu.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if uu.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := uu.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.MaritalStatus(); ok {
		_spec.SetField(user.FieldMaritalStatus, field.TypeString, value)
	}
	if uu.mutation.MaritalStatusCleared() {
		_spec.ClearField(user.FieldMaritalStatus, field.TypeString)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uu.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uu.mutation.HomeAddress(); ok {
		_spec.SetField(user.FieldHomeAddress, field.TypeString, value)
	}
	if uu.mutation.HomeAddressCleared() {
		_spec.ClearField(user.FieldHomeAddress, field.TypeString)
	}
	if value, ok := uu.mutation.City(); ok {
		_spec.SetField(user.FieldCity, field.TypeString, value)
	}
	if uu.mutation.CityCleared() {
		_spec.ClearField(user.FieldCity, field.TypeString)
	}
	if value, ok := uu.mutation.BirthDate(); ok {
		_spec.SetField(user.FieldBirthDate, field.TypeTime, value)
	}
	if uu.mutation.BirthDateCleared() {
		_spec.ClearField(user.FieldBirthDate, field.TypeTime)
	}
	if value, ok := uu.mutation.ExpirationDate(); ok {
		_spec.SetField(user.FieldExpirationDate, field.TypeTime, value)
	}
	if uu.mutation.ExpirationDateCleared() {
		_spec.ClearField(user.FieldExpirationDate, field.TypeTime)
	}
	if value, ok := uu.mutation.PlantType(); ok {
		_spec.SetField(user.FieldPlantType, field.TypeString, value)
	}
	if uu.mutation.PlantTypeCleared() {
		_spec.ClearField(user.FieldPlantType, field.TypeString)
	}
	if value, ok := uu.mutation.EmergencyName(); ok {
		_spec.SetField(user.FieldEmergencyName, field.TypeString, value)
	}
	if uu.mutation.EmergencyNameCleared() {
		_spec.ClearField(user.FieldEmergencyName, field.TypeString)
	}
	if value, ok := uu.mutation.EmergencyNumber(); ok {
		_spec.SetField(user.FieldEmergencyNumber, field.TypeString, value)
	}
	if uu.mutation.EmergencyNumberCleared() {
		_spec.ClearField(user.FieldEmergencyNumber, field.TypeString)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Expose(); ok {
		_spec.SetField(user.FieldExpose, field.TypeBool, value)
	}
	if uu.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.LocationsTable,
			Columns: user.LocationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !uu.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.LocationsTable,
			Columns: user.LocationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.LocationsTable,
			Columns: user.LocationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetRun sets the "run" field.
func (uuo *UserUpdateOne) SetRun(i int) *UserUpdateOne {
	uuo.mutation.ResetRun()
	uuo.mutation.SetRun(i)
	return uuo
}

// SetNillableRun sets the "run" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRun(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetRun(*i)
	}
	return uuo
}

// AddRun adds i to the "run" field.
func (uuo *UserUpdateOne) AddRun(i int) *UserUpdateOne {
	uuo.mutation.AddRun(i)
	return uuo
}

// SetVerificationDigit sets the "verification_digit" field.
func (uuo *UserUpdateOne) SetVerificationDigit(s string) *UserUpdateOne {
	uuo.mutation.SetVerificationDigit(s)
	return uuo
}

// SetNillableVerificationDigit sets the "verification_digit" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableVerificationDigit(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetVerificationDigit(*s)
	}
	return uuo
}

// SetFirstName sets the "first_name" field.
func (uuo *UserUpdateOne) SetFirstName(s string) *UserUpdateOne {
	uuo.mutation.SetFirstName(s)
	return uuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFirstName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFirstName(*s)
	}
	return uuo
}

// ClearFirstName clears the value of the "first_name" field.
func (uuo *UserUpdateOne) ClearFirstName() *UserUpdateOne {
	uuo.mutation.ClearFirstName()
	return uuo
}

// SetLastName sets the "last_name" field.
func (uuo *UserUpdateOne) SetLastName(s string) *UserUpdateOne {
	uuo.mutation.SetLastName(s)
	return uuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastName(*s)
	}
	return uuo
}

// ClearLastName clears the value of the "last_name" field.
func (uuo *UserUpdateOne) ClearLastName() *UserUpdateOne {
	uuo.mutation.ClearLastName()
	return uuo
}

// SetPhoneNumber sets the "phone_number" field.
func (uuo *UserUpdateOne) SetPhoneNumber(s string) *UserUpdateOne {
	uuo.mutation.SetPhoneNumber(s)
	return uuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhoneNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhoneNumber(*s)
	}
	return uuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uuo *UserUpdateOne) ClearPhoneNumber() *UserUpdateOne {
	uuo.mutation.ClearPhoneNumber()
	return uuo
}

// SetGender sets the "gender" field.
func (uuo *UserUpdateOne) SetGender(u user.Gender) *UserUpdateOne {
	uuo.mutation.SetGender(u)
	return uuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGender(u *user.Gender) *UserUpdateOne {
	if u != nil {
		uuo.SetGender(*u)
	}
	return uuo
}

// SetMaritalStatus sets the "marital_status" field.
func (uuo *UserUpdateOne) SetMaritalStatus(s string) *UserUpdateOne {
	uuo.mutation.SetMaritalStatus(s)
	return uuo
}

// SetNillableMaritalStatus sets the "marital_status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMaritalStatus(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetMaritalStatus(*s)
	}
	return uuo
}

// ClearMaritalStatus clears the value of the "marital_status" field.
func (uuo *UserUpdateOne) ClearMaritalStatus() *UserUpdateOne {
	uuo.mutation.ClearMaritalStatus()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// ClearEmail clears the value of the "email" field.
func (uuo *UserUpdateOne) ClearEmail() *UserUpdateOne {
	uuo.mutation.ClearEmail()
	return uuo
}

// SetHomeAddress sets the "home_address" field.
func (uuo *UserUpdateOne) SetHomeAddress(s string) *UserUpdateOne {
	uuo.mutation.SetHomeAddress(s)
	return uuo
}

// SetNillableHomeAddress sets the "home_address" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableHomeAddress(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetHomeAddress(*s)
	}
	return uuo
}

// ClearHomeAddress clears the value of the "home_address" field.
func (uuo *UserUpdateOne) ClearHomeAddress() *UserUpdateOne {
	uuo.mutation.ClearHomeAddress()
	return uuo
}

// SetCity sets the "city" field.
func (uuo *UserUpdateOne) SetCity(s string) *UserUpdateOne {
	uuo.mutation.SetCity(s)
	return uuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCity(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCity(*s)
	}
	return uuo
}

// ClearCity clears the value of the "city" field.
func (uuo *UserUpdateOne) ClearCity() *UserUpdateOne {
	uuo.mutation.ClearCity()
	return uuo
}

// SetBirthDate sets the "birth_date" field.
func (uuo *UserUpdateOne) SetBirthDate(t time.Time) *UserUpdateOne {
	uuo.mutation.SetBirthDate(t)
	return uuo
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBirthDate(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetBirthDate(*t)
	}
	return uuo
}

// ClearBirthDate clears the value of the "birth_date" field.
func (uuo *UserUpdateOne) ClearBirthDate() *UserUpdateOne {
	uuo.mutation.ClearBirthDate()
	return uuo
}

// SetExpirationDate sets the "expiration_date" field.
func (uuo *UserUpdateOne) SetExpirationDate(t time.Time) *UserUpdateOne {
	uuo.mutation.SetExpirationDate(t)
	return uuo
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableExpirationDate(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetExpirationDate(*t)
	}
	return uuo
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (uuo *UserUpdateOne) ClearExpirationDate() *UserUpdateOne {
	uuo.mutation.ClearExpirationDate()
	return uuo
}

// SetPlantType sets the "plant_type" field.
func (uuo *UserUpdateOne) SetPlantType(s string) *UserUpdateOne {
	uuo.mutation.SetPlantType(s)
	return uuo
}

// SetNillablePlantType sets the "plant_type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePlantType(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPlantType(*s)
	}
	return uuo
}

// ClearPlantType clears the value of the "plant_type" field.
func (uuo *UserUpdateOne) ClearPlantType() *UserUpdateOne {
	uuo.mutation.ClearPlantType()
	return uuo
}

// SetEmergencyName sets the "emergency_name" field.
func (uuo *UserUpdateOne) SetEmergencyName(s string) *UserUpdateOne {
	uuo.mutation.SetEmergencyName(s)
	return uuo
}

// SetNillableEmergencyName sets the "emergency_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmergencyName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmergencyName(*s)
	}
	return uuo
}

// ClearEmergencyName clears the value of the "emergency_name" field.
func (uuo *UserUpdateOne) ClearEmergencyName() *UserUpdateOne {
	uuo.mutation.ClearEmergencyName()
	return uuo
}

// SetEmergencyNumber sets the "emergency_number" field.
func (uuo *UserUpdateOne) SetEmergencyNumber(s string) *UserUpdateOne {
	uuo.mutation.SetEmergencyNumber(s)
	return uuo
}

// SetNillableEmergencyNumber sets the "emergency_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmergencyNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmergencyNumber(*s)
	}
	return uuo
}

// ClearEmergencyNumber clears the value of the "emergency_number" field.
func (uuo *UserUpdateOne) ClearEmergencyNumber() *UserUpdateOne {
	uuo.mutation.ClearEmergencyNumber()
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetExpose sets the "expose" field.
func (uuo *UserUpdateOne) SetExpose(b bool) *UserUpdateOne {
	uuo.mutation.SetExpose(b)
	return uuo
}

// SetNillableExpose sets the "expose" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableExpose(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetExpose(*b)
	}
	return uuo
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (uuo *UserUpdateOne) AddLocationIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddLocationIDs(ids...)
	return uuo
}

// AddLocations adds the "locations" edges to the Location entity.
func (uuo *UserUpdateOne) AddLocations(l ...*Location) *UserUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uuo.AddLocationIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearLocations clears all "locations" edges to the Location entity.
func (uuo *UserUpdateOne) ClearLocations() *UserUpdateOne {
	uuo.mutation.ClearLocations()
	return uuo
}

// RemoveLocationIDs removes the "locations" edge to Location entities by IDs.
func (uuo *UserUpdateOne) RemoveLocationIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveLocationIDs(ids...)
	return uuo
}

// RemoveLocations removes "locations" edges to Location entities.
func (uuo *UserUpdateOne) RemoveLocations(l ...*Location) *UserUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uuo.RemoveLocationIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Run(); ok {
		if err := user.RunValidator(v); err != nil {
			return &ValidationError{Name: "run", err: fmt.Errorf(`ent: validator failed for field "User.run": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.VerificationDigit(); ok {
		if err := user.VerificationDigitValidator(v); err != nil {
			return &ValidationError{Name: "verification_digit", err: fmt.Errorf(`ent: validator failed for field "User.verification_digit": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "User.gender": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Run(); ok {
		_spec.SetField(user.FieldRun, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedRun(); ok {
		_spec.AddField(user.FieldRun, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.VerificationDigit(); ok {
		_spec.SetField(user.FieldVerificationDigit, field.TypeString, value)
	}
	if value, ok := uuo.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if uuo.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := uuo.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if uuo.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := uuo.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if uuo.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := uuo.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.MaritalStatus(); ok {
		_spec.SetField(user.FieldMaritalStatus, field.TypeString, value)
	}
	if uuo.mutation.MaritalStatusCleared() {
		_spec.ClearField(user.FieldMaritalStatus, field.TypeString)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uuo.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uuo.mutation.HomeAddress(); ok {
		_spec.SetField(user.FieldHomeAddress, field.TypeString, value)
	}
	if uuo.mutation.HomeAddressCleared() {
		_spec.ClearField(user.FieldHomeAddress, field.TypeString)
	}
	if value, ok := uuo.mutation.City(); ok {
		_spec.SetField(user.FieldCity, field.TypeString, value)
	}
	if uuo.mutation.CityCleared() {
		_spec.ClearField(user.FieldCity, field.TypeString)
	}
	if value, ok := uuo.mutation.BirthDate(); ok {
		_spec.SetField(user.FieldBirthDate, field.TypeTime, value)
	}
	if uuo.mutation.BirthDateCleared() {
		_spec.ClearField(user.FieldBirthDate, field.TypeTime)
	}
	if value, ok := uuo.mutation.ExpirationDate(); ok {
		_spec.SetField(user.FieldExpirationDate, field.TypeTime, value)
	}
	if uuo.mutation.ExpirationDateCleared() {
		_spec.ClearField(user.FieldExpirationDate, field.TypeTime)
	}
	if value, ok := uuo.mutation.PlantType(); ok {
		_spec.SetField(user.FieldPlantType, field.TypeString, value)
	}
	if uuo.mutation.PlantTypeCleared() {
		_spec.ClearField(user.FieldPlantType, field.TypeString)
	}
	if value, ok := uuo.mutation.EmergencyName(); ok {
		_spec.SetField(user.FieldEmergencyName, field.TypeString, value)
	}
	if uuo.mutation.EmergencyNameCleared() {
		_spec.ClearField(user.FieldEmergencyName, field.TypeString)
	}
	if value, ok := uuo.mutation.EmergencyNumber(); ok {
		_spec.SetField(user.FieldEmergencyNumber, field.TypeString, value)
	}
	if uuo.mutation.EmergencyNumberCleared() {
		_spec.ClearField(user.FieldEmergencyNumber, field.TypeString)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Expose(); ok {
		_spec.SetField(user.FieldExpose, field.TypeBool, value)
	}
	if uuo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.LocationsTable,
			Columns: user.LocationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !uuo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.LocationsTable,
			Columns: user.LocationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.LocationsTable,
			Columns: user.LocationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
