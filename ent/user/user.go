// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRun holds the string denoting the run field in the database.
	FieldRun = "run"
	// FieldVerificationDigit holds the string denoting the verification_digit field in the database.
	FieldVerificationDigit = "verification_digit"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldMaritalStatus holds the string denoting the marital_status field in the database.
	FieldMaritalStatus = "marital_status"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldHomeAddress holds the string denoting the home_address field in the database.
	FieldHomeAddress = "home_address"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldBirthDate holds the string denoting the birth_date field in the database.
	FieldBirthDate = "birth_date"
	// FieldExpirationDate holds the string denoting the expiration_date field in the database.
	FieldExpirationDate = "expiration_date"
	// FieldPlantType holds the string denoting the plant_type field in the database.
	FieldPlantType = "plant_type"
	// FieldEmergencyName holds the string denoting the emergency_name field in the database.
	FieldEmergencyName = "emergency_name"
	// FieldEmergencyNumber holds the string denoting the emergency_number field in the database.
	FieldEmergencyNumber = "emergency_number"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldExpose holds the string denoting the expose field in the database.
	FieldExpose = "expose"
	// EdgeLocations holds the string denoting the locations edge name in mutations.
	EdgeLocations = "locations"
	// Table holds the table name of the user in the database.
	Table = "users"
	// LocationsTable is the table that holds the locations relation/edge. The primary key declared below.
	LocationsTable = "location_users"
	// LocationsInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	LocationsInverseTable = "locations"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldRun,
	FieldVerificationDigit,
	FieldFirstName,
	FieldLastName,
	FieldPhoneNumber,
	FieldGender,
	FieldMaritalStatus,
	FieldEmail,
	FieldHomeAddress,
	FieldCity,
	FieldBirthDate,
	FieldExpirationDate,
	FieldPlantType,
	FieldEmergencyName,
	FieldEmergencyNumber,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldExpose,
}

var (
	// LocationsPrimaryKey and LocationsColumn2 are the table columns denoting the
	// primary key for the locations relation (M2M).
	LocationsPrimaryKey = []string{"location_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// RunValidator is a validator for the "run" field. It is called by the builders before save.
	RunValidator func(int) error
	// VerificationDigitValidator is a validator for the "verification_digit" field. It is called by the builders before save.
	VerificationDigitValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultExpose holds the default value on creation for the "expose" field.
	DefaultExpose bool
)

// Gender defines the type for the "gender" enum field.
type Gender string

// GenderUNKNOWN is the default value of the Gender enum.
const DefaultGender = GenderUNKNOWN

// Gender values.
const (
	GenderUNKNOWN Gender = "UNKNOWN"
	GenderMALE    Gender = "MALE"
	GenderFEMALE  Gender = "FEMALE"
)

func (ge Gender) String() string {
	return string(ge)
}

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge Gender) error {
	switch ge {
	case GenderUNKNOWN, GenderMALE, GenderFEMALE:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for gender field: %q", ge)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRun orders the results by the run field.
func ByRun(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRun, opts...).ToFunc()
}

// ByVerificationDigit orders the results by the verification_digit field.
func ByVerificationDigit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerificationDigit, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByMaritalStatus orders the results by the marital_status field.
func ByMaritalStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaritalStatus, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByHomeAddress orders the results by the home_address field.
func ByHomeAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHomeAddress, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByBirthDate orders the results by the birth_date field.
func ByBirthDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthDate, opts...).ToFunc()
}

// ByExpirationDate orders the results by the expiration_date field.
func ByExpirationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpirationDate, opts...).ToFunc()
}

// ByPlantType orders the results by the plant_type field.
func ByPlantType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlantType, opts...).ToFunc()
}

// ByEmergencyName orders the results by the emergency_name field.
func ByEmergencyName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmergencyName, opts...).ToFunc()
}

// ByEmergencyNumber orders the results by the emergency_number field.
func ByEmergencyNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmergencyNumber, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByExpose orders the results by the expose field.
func ByExpose(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpose, opts...).ToFunc()
}

// ByLocationsCount orders the results by locations count.
func ByLocationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLocationsStep(), opts...)
	}
}

// ByLocations orders the results by locations terms.
func ByLocations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLocationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLocationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LocationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, LocationsTable, LocationsPrimaryKey...),
	)
}
