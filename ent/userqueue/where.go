// Code generated by ent, DO NOT EDIT.

package userqueue

import (
	"spl-users/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldLTE(FieldID, id))
}

// Run applies equality check predicate on the "run" field. It's identical to RunEQ.
func Run(v int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldEQ(FieldRun, v))
}

// VerificationDigit applies equality check predicate on the "verification_digit" field. It's identical to VerificationDigitEQ.
func VerificationDigit(v string) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldEQ(FieldVerificationDigit, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldEQ(FieldUpdatedAt, v))
}

// RunEQ applies the EQ predicate on the "run" field.
func RunEQ(v int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldEQ(FieldRun, v))
}

// RunNEQ applies the NEQ predicate on the "run" field.
func RunNEQ(v int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldNEQ(FieldRun, v))
}

// RunIn applies the In predicate on the "run" field.
func RunIn(vs ...int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldIn(FieldRun, vs...))
}

// RunNotIn applies the NotIn predicate on the "run" field.
func RunNotIn(vs ...int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldNotIn(FieldRun, vs...))
}

// RunGT applies the GT predicate on the "run" field.
func RunGT(v int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldGT(FieldRun, v))
}

// RunGTE applies the GTE predicate on the "run" field.
func RunGTE(v int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldGTE(FieldRun, v))
}

// RunLT applies the LT predicate on the "run" field.
func RunLT(v int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldLT(FieldRun, v))
}

// RunLTE applies the LTE predicate on the "run" field.
func RunLTE(v int) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldLTE(FieldRun, v))
}

// VerificationDigitEQ applies the EQ predicate on the "verification_digit" field.
func VerificationDigitEQ(v string) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldEQ(FieldVerificationDigit, v))
}

// VerificationDigitNEQ applies the NEQ predicate on the "verification_digit" field.
func VerificationDigitNEQ(v string) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldNEQ(FieldVerificationDigit, v))
}

// VerificationDigitIn applies the In predicate on the "verification_digit" field.
func VerificationDigitIn(vs ...string) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldIn(FieldVerificationDigit, vs...))
}

// VerificationDigitNotIn applies the NotIn predicate on the "verification_digit" field.
func VerificationDigitNotIn(vs ...string) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldNotIn(FieldVerificationDigit, vs...))
}

// VerificationDigitGT applies the GT predicate on the "verification_digit" field.
func VerificationDigitGT(v string) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldGT(FieldVerificationDigit, v))
}

// VerificationDigitGTE applies the GTE predicate on the "verification_digit" field.
func VerificationDigitGTE(v string) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldGTE(FieldVerificationDigit, v))
}

// VerificationDigitLT applies the LT predicate on the "verification_digit" field.
func VerificationDigitLT(v string) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldLT(FieldVerificationDigit, v))
}

// VerificationDigitLTE applies the LTE predicate on the "verification_digit" field.
func VerificationDigitLTE(v string) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldLTE(FieldVerificationDigit, v))
}

// VerificationDigitContains applies the Contains predicate on the "verification_digit" field.
func VerificationDigitContains(v string) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldContains(FieldVerificationDigit, v))
}

// VerificationDigitHasPrefix applies the HasPrefix predicate on the "verification_digit" field.
func VerificationDigitHasPrefix(v string) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldHasPrefix(FieldVerificationDigit, v))
}

// VerificationDigitHasSuffix applies the HasSuffix predicate on the "verification_digit" field.
func VerificationDigitHasSuffix(v string) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldHasSuffix(FieldVerificationDigit, v))
}

// VerificationDigitEqualFold applies the EqualFold predicate on the "verification_digit" field.
func VerificationDigitEqualFold(v string) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldEqualFold(FieldVerificationDigit, v))
}

// VerificationDigitContainsFold applies the ContainsFold predicate on the "verification_digit" field.
func VerificationDigitContainsFold(v string) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldContainsFold(FieldVerificationDigit, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldLTE(FieldUpdatedAt, v))
}

// FetchStatusEQ applies the EQ predicate on the "fetch_status" field.
func FetchStatusEQ(v FetchStatus) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldEQ(FieldFetchStatus, v))
}

// FetchStatusNEQ applies the NEQ predicate on the "fetch_status" field.
func FetchStatusNEQ(v FetchStatus) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldNEQ(FieldFetchStatus, v))
}

// FetchStatusIn applies the In predicate on the "fetch_status" field.
func FetchStatusIn(vs ...FetchStatus) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldIn(FieldFetchStatus, vs...))
}

// FetchStatusNotIn applies the NotIn predicate on the "fetch_status" field.
func FetchStatusNotIn(vs ...FetchStatus) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldNotIn(FieldFetchStatus, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.UserQueue {
	return predicate.UserQueue(sql.FieldNotIn(FieldStatus, vs...))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserQueue) predicate.UserQueue {
	return predicate.UserQueue(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserQueue) predicate.UserQueue {
	return predicate.UserQueue(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserQueue) predicate.UserQueue {
	return predicate.UserQueue(sql.NotPredicates(p))
}
