// Code generated by ent, DO NOT EDIT.

package userqueue

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the userqueue type in the database.
	Label = "user_queue"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRun holds the string denoting the run field in the database.
	FieldRun = "run"
	// FieldVerificationDigit holds the string denoting the verification_digit field in the database.
	FieldVerificationDigit = "verification_digit"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldFetchStatus holds the string denoting the fetch_status field in the database.
	FieldFetchStatus = "fetch_status"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// Table holds the table name of the userqueue in the database.
	Table = "user_queues"
)

// Columns holds all SQL columns for userqueue fields.
var Columns = []string{
	FieldID,
	FieldRun,
	FieldVerificationDigit,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldFetchStatus,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// RunValidator is a validator for the "run" field. It is called by the builders before save.
	RunValidator func(int) error
	// VerificationDigitValidator is a validator for the "verification_digit" field. It is called by the builders before save.
	VerificationDigitValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// FetchStatus defines the type for the "fetch_status" enum field.
type FetchStatus string

// FetchStatusWAITING is the default value of the FetchStatus enum.
const DefaultFetchStatus = FetchStatusWAITING

// FetchStatus values.
const (
	FetchStatusWAITING   FetchStatus = "WAITING"
	FetchStatusPENDING   FetchStatus = "PENDING"
	FetchStatusERROR     FetchStatus = "ERROR"
	FetchStatusCOMPLETED FetchStatus = "COMPLETED"
)

func (fs FetchStatus) String() string {
	return string(fs)
}

// FetchStatusValidator is a validator for the "fetch_status" field enum values. It is called by the builders before save.
func FetchStatusValidator(fs FetchStatus) error {
	switch fs {
	case FetchStatusWAITING, FetchStatusPENDING, FetchStatusERROR, FetchStatusCOMPLETED:
		return nil
	default:
		return fmt.Errorf("userqueue: invalid enum value for fetch_status field: %q", fs)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusEMPTY is the default value of the Status enum.
const DefaultStatus = StatusEMPTY

// Status values.
const (
	StatusEMPTY     Status = "EMPTY"
	StatusNOT_FOUND Status = "NOT_FOUND"
	StatusFOUND     Status = "FOUND"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusEMPTY, StatusNOT_FOUND, StatusFOUND:
		return nil
	default:
		return fmt.Errorf("userqueue: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the UserQueue queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRun orders the results by the run field.
func ByRun(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRun, opts...).ToFunc()
}

// ByVerificationDigit orders the results by the verification_digit field.
func ByVerificationDigit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerificationDigit, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByFetchStatus orders the results by the fetch_status field.
func ByFetchStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFetchStatus, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}
