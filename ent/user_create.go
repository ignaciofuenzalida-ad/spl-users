// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spl-users/ent/location"
	"spl-users/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRun sets the "run" field.
func (uc *UserCreate) SetRun(i int) *UserCreate {
	uc.mutation.SetRun(i)
	return uc
}

// SetVerificationDigit sets the "verification_digit" field.
func (uc *UserCreate) SetVerificationDigit(s string) *UserCreate {
	uc.mutation.SetVerificationDigit(s)
	return uc
}

// SetFirstName sets the "first_name" field.
func (uc *UserCreate) SetFirstName(s string) *UserCreate {
	uc.mutation.SetFirstName(s)
	return uc
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableFirstName(s *string) *UserCreate {
	if s != nil {
		uc.SetFirstName(*s)
	}
	return uc
}

// SetLastName sets the "last_name" field.
func (uc *UserCreate) SetLastName(s string) *UserCreate {
	uc.mutation.SetLastName(s)
	return uc
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastName(s *string) *UserCreate {
	if s != nil {
		uc.SetLastName(*s)
	}
	return uc
}

// SetPhoneNumber sets the "phone_number" field.
func (uc *UserCreate) SetPhoneNumber(s string) *UserCreate {
	uc.mutation.SetPhoneNumber(s)
	return uc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhoneNumber(s *string) *UserCreate {
	if s != nil {
		uc.SetPhoneNumber(*s)
	}
	return uc
}

// SetGender sets the "gender" field.
func (uc *UserCreate) SetGender(u user.Gender) *UserCreate {
	uc.mutation.SetGender(u)
	return uc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uc *UserCreate) SetNillableGender(u *user.Gender) *UserCreate {
	if u != nil {
		uc.SetGender(*u)
	}
	return uc
}

// SetMaritalStatus sets the "marital_status" field.
func (uc *UserCreate) SetMaritalStatus(s string) *UserCreate {
	uc.mutation.SetMaritalStatus(s)
	return uc
}

// SetNillableMaritalStatus sets the "marital_status" field if the given value is not nil.
func (uc *UserCreate) SetNillableMaritalStatus(s *string) *UserCreate {
	if s != nil {
		uc.SetMaritalStatus(*s)
	}
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmail(s *string) *UserCreate {
	if s != nil {
		uc.SetEmail(*s)
	}
	return uc
}

// SetHomeAddress sets the "home_address" field.
func (uc *UserCreate) SetHomeAddress(s string) *UserCreate {
	uc.mutation.SetHomeAddress(s)
	return uc
}

// SetNillableHomeAddress sets the "home_address" field if the given value is not nil.
func (uc *UserCreate) SetNillableHomeAddress(s *string) *UserCreate {
	if s != nil {
		uc.SetHomeAddress(*s)
	}
	return uc
}

// SetCity sets the "city" field.
func (uc *UserCreate) SetCity(s string) *UserCreate {
	uc.mutation.SetCity(s)
	return uc
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (uc *UserCreate) SetNillableCity(s *string) *UserCreate {
	if s != nil {
		uc.SetCity(*s)
	}
	return uc
}

// SetBirthDate sets the "birth_date" field.
func (uc *UserCreate) SetBirthDate(t time.Time) *UserCreate {
	uc.mutation.SetBirthDate(t)
	return uc
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (uc *UserCreate) SetNillableBirthDate(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetBirthDate(*t)
	}
	return uc
}

// SetExpirationDate sets the "expiration_date" field.
func (uc *UserCreate) SetExpirationDate(t time.Time) *UserCreate {
	uc.mutation.SetExpirationDate(t)
	return uc
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (uc *UserCreate) SetNillableExpirationDate(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetExpirationDate(*t)
	}
	return uc
}

// SetPlantType sets the "plant_type" field.
func (uc *UserCreate) SetPlantType(s string) *UserCreate {
	uc.mutation.SetPlantType(s)
	return uc
}

// SetNillablePlantType sets the "plant_type" field if the given value is not nil.
func (uc *UserCreate) SetNillablePlantType(s *string) *UserCreate {
	if s != nil {
		uc.SetPlantType(*s)
	}
	return uc
}

// SetEmergencyName sets the "emergency_name" field.
func (uc *UserCreate) SetEmergencyName(s string) *UserCreate {
	uc.mutation.SetEmergencyName(s)
	return uc
}

// SetNillableEmergencyName sets the "emergency_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmergencyName(s *string) *UserCreate {
	if s != nil {
		uc.SetEmergencyName(*s)
	}
	return uc
}

// SetEmergencyNumber sets the "emergency_number" field.
func (uc *UserCreate) SetEmergencyNumber(s string) *UserCreate {
	uc.mutation.SetEmergencyNumber(s)
	return uc
}

// SetNillableEmergencyNumber sets the "emergency_number" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmergencyNumber(s *string) *UserCreate {
	if s != nil {
		uc.SetEmergencyNumber(*s)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetExpose sets the "expose" field.
func (uc *UserCreate) SetExpose(b bool) *UserCreate {
	uc.mutation.SetExpose(b)
	return uc
}

// SetNillableExpose sets the "expose" field if the given value is not nil.
func (uc *UserCreate) SetNillableExpose(b *bool) *UserCreate {
	if b != nil {
		uc.SetExpose(*b)
	}
	return uc
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (uc *UserCreate) AddLocationIDs(ids ...int) *UserCreate {
	uc.mutation.AddLocationIDs(ids...)
	return uc
}

// AddLocations adds the "locations" edges to the Location entity.
func (uc *UserCreate) AddLocations(l ...*Location) *UserCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uc.AddLocationIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.Gender(); !ok {
		v := user.DefaultGender
		uc.mutation.SetGender(v)
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.Expose(); !ok {
		v := user.DefaultExpose
		uc.mutation.SetExpose(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Run(); !ok {
		return &ValidationError{Name: "run", err: errors.New(`ent: missing required field "User.run"`)}
	}
	if v, ok := uc.mutation.Run(); ok {
		if err := user.RunValidator(v); err != nil {
			return &ValidationError{Name: "run", err: fmt.Errorf(`ent: validator failed for field "User.run": %w`, err)}
		}
	}
	if _, ok := uc.mutation.VerificationDigit(); !ok {
		return &ValidationError{Name: "verification_digit", err: errors.New(`ent: missing required field "User.verification_digit"`)}
	}
	if v, ok := uc.mutation.VerificationDigit(); ok {
		if err := user.VerificationDigitValidator(v); err != nil {
			return &ValidationError{Name: "verification_digit", err: fmt.Errorf(`ent: validator failed for field "User.verification_digit": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "User.gender"`)}
	}
	if v, ok := uc.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "User.gender": %w`, err)}
		}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	if _, ok := uc.mutation.Expose(); !ok {
		return &ValidationError{Name: "expose", err: errors.New(`ent: missing required field "User.expose"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	_spec.OnConflict = uc.conflict
	if value, ok := uc.mutation.Run(); ok {
		_spec.SetField(user.FieldRun, field.TypeInt, value)
		_node.Run = value
	}
	if value, ok := uc.mutation.VerificationDigit(); ok {
		_spec.SetField(user.FieldVerificationDigit, field.TypeString, value)
		_node.VerificationDigit = value
	}
	if value, ok := uc.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := uc.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := uc.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := uc.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if value, ok := uc.mutation.MaritalStatus(); ok {
		_spec.SetField(user.FieldMaritalStatus, field.TypeString, value)
		_node.MaritalStatus = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.HomeAddress(); ok {
		_spec.SetField(user.FieldHomeAddress, field.TypeString, value)
		_node.HomeAddress = value
	}
	if value, ok := uc.mutation.City(); ok {
		_spec.SetField(user.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := uc.mutation.BirthDate(); ok {
		_spec.SetField(user.FieldBirthDate, field.TypeTime, value)
		_node.BirthDate = value
	}
	if value, ok := uc.mutation.ExpirationDate(); ok {
		_spec.SetField(user.FieldExpirationDate, field.TypeTime, value)
		_node.ExpirationDate = value
	}
	if value, ok := uc.mutation.PlantType(); ok {
		_spec.SetField(user.FieldPlantType, field.TypeString, value)
		_node.PlantType = value
	}
	if value, ok := uc.mutation.EmergencyName(); ok {
		_spec.SetField(user.FieldEmergencyName, field.TypeString, value)
		_node.EmergencyName = value
	}
	if value, ok := uc.mutation.EmergencyNumber(); ok {
		_spec.SetField(user.FieldEmergencyNumber, field.TypeString, value)
		_node.EmergencyNumber = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.Expose(); ok {
		_spec.SetField(user.FieldExpose, field.TypeBool, value)
		_node.Expose = value
	}
	if nodes := uc.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.LocationsTable,
			Columns: user.LocationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetRun(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetRun(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetRun sets the "run" field.
func (u *UserUpsert) SetRun(v int) *UserUpsert {
	u.Set(user.FieldRun, v)
	return u
}

// UpdateRun sets the "run" field to the value that was provided on create.
func (u *UserUpsert) UpdateRun() *UserUpsert {
	u.SetExcluded(user.FieldRun)
	return u
}

// AddRun adds v to the "run" field.
func (u *UserUpsert) AddRun(v int) *UserUpsert {
	u.Add(user.FieldRun, v)
	return u
}

// SetVerificationDigit sets the "verification_digit" field.
func (u *UserUpsert) SetVerificationDigit(v string) *UserUpsert {
	u.Set(user.FieldVerificationDigit, v)
	return u
}

// UpdateVerificationDigit sets the "verification_digit" field to the value that was provided on create.
func (u *UserUpsert) UpdateVerificationDigit() *UserUpsert {
	u.SetExcluded(user.FieldVerificationDigit)
	return u
}

// SetFirstName sets the "first_name" field.
func (u *UserUpsert) SetFirstName(v string) *UserUpsert {
	u.Set(user.FieldFirstName, v)
	return u
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateFirstName() *UserUpsert {
	u.SetExcluded(user.FieldFirstName)
	return u
}

// ClearFirstName clears the value of the "first_name" field.
func (u *UserUpsert) ClearFirstName() *UserUpsert {
	u.SetNull(user.FieldFirstName)
	return u
}

// SetLastName sets the "last_name" field.
func (u *UserUpsert) SetLastName(v string) *UserUpsert {
	u.Set(user.FieldLastName, v)
	return u
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastName() *UserUpsert {
	u.SetExcluded(user.FieldLastName)
	return u
}

// ClearLastName clears the value of the "last_name" field.
func (u *UserUpsert) ClearLastName() *UserUpsert {
	u.SetNull(user.FieldLastName)
	return u
}

// SetPhoneNumber sets the "phone_number" field.
func (u *UserUpsert) SetPhoneNumber(v string) *UserUpsert {
	u.Set(user.FieldPhoneNumber, v)
	return u
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *UserUpsert) UpdatePhoneNumber() *UserUpsert {
	u.SetExcluded(user.FieldPhoneNumber)
	return u
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (u *UserUpsert) ClearPhoneNumber() *UserUpsert {
	u.SetNull(user.FieldPhoneNumber)
	return u
}

// SetGender sets the "gender" field.
func (u *UserUpsert) SetGender(v user.Gender) *UserUpsert {
	u.Set(user.FieldGender, v)
	return u
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *UserUpsert) UpdateGender() *UserUpsert {
	u.SetExcluded(user.FieldGender)
	return u
}

// SetMaritalStatus sets the "marital_status" field.
func (u *UserUpsert) SetMaritalStatus(v string) *UserUpsert {
	u.Set(user.FieldMaritalStatus, v)
	return u
}

// UpdateMaritalStatus sets the "marital_status" field to the value that was provided on create.
func (u *UserUpsert) UpdateMaritalStatus() *UserUpsert {
	u.SetExcluded(user.FieldMaritalStatus)
	return u
}

// ClearMaritalStatus clears the value of the "marital_status" field.
func (u *UserUpsert) ClearMaritalStatus() *UserUpsert {
	u.SetNull(user.FieldMaritalStatus)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsert) ClearEmail() *UserUpsert {
	u.SetNull(user.FieldEmail)
	return u
}

// SetHomeAddress sets the "home_address" field.
func (u *UserUpsert) SetHomeAddress(v string) *UserUpsert {
	u.Set(user.FieldHomeAddress, v)
	return u
}

// UpdateHomeAddress sets the "home_address" field to the value that was provided on create.
func (u *UserUpsert) UpdateHomeAddress() *UserUpsert {
	u.SetExcluded(user.FieldHomeAddress)
	return u
}

// ClearHomeAddress clears the value of the "home_address" field.
func (u *UserUpsert) ClearHomeAddress() *UserUpsert {
	u.SetNull(user.FieldHomeAddress)
	return u
}

// SetCity sets the "city" field.
func (u *UserUpsert) SetCity(v string) *UserUpsert {
	u.Set(user.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *UserUpsert) UpdateCity() *UserUpsert {
	u.SetExcluded(user.FieldCity)
	return u
}

// ClearCity clears the value of the "city" field.
func (u *UserUpsert) ClearCity() *UserUpsert {
	u.SetNull(user.FieldCity)
	return u
}

// SetBirthDate sets the "birth_date" field.
func (u *UserUpsert) SetBirthDate(v time.Time) *UserUpsert {
	u.Set(user.FieldBirthDate, v)
	return u
}

// UpdateBirthDate sets the "birth_date" field to the value that was provided on create.
func (u *UserUpsert) UpdateBirthDate() *UserUpsert {
	u.SetExcluded(user.FieldBirthDate)
	return u
}

// ClearBirthDate clears the value of the "birth_date" field.
func (u *UserUpsert) ClearBirthDate() *UserUpsert {
	u.SetNull(user.FieldBirthDate)
	return u
}

// SetExpirationDate sets the "expiration_date" field.
func (u *UserUpsert) SetExpirationDate(v time.Time) *UserUpsert {
	u.Set(user.FieldExpirationDate, v)
	return u
}

// UpdateExpirationDate sets the "expiration_date" field to the value that was provided on create.
func (u *UserUpsert) UpdateExpirationDate() *UserUpsert {
	u.SetExcluded(user.FieldExpirationDate)
	return u
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (u *UserUpsert) ClearExpirationDate() *UserUpsert {
	u.SetNull(user.FieldExpirationDate)
	return u
}

// SetPlantType sets the "plant_type" field.
func (u *UserUpsert) SetPlantType(v string) *UserUpsert {
	u.Set(user.FieldPlantType, v)
	return u
}

// UpdatePlantType sets the "plant_type" field to the value that was provided on create.
func (u *UserUpsert) UpdatePlantType() *UserUpsert {
	u.SetExcluded(user.FieldPlantType)
	return u
}

// ClearPlantType clears the value of the "plant_type" field.
func (u *UserUpsert) ClearPlantType() *UserUpsert {
	u.SetNull(user.FieldPlantType)
	return u
}

// SetEmergencyName sets the "emergency_name" field.
func (u *UserUpsert) SetEmergencyName(v string) *UserUpsert {
	u.Set(user.FieldEmergencyName, v)
	return u
}

// UpdateEmergencyName sets the "emergency_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmergencyName() *UserUpsert {
	u.SetExcluded(user.FieldEmergencyName)
	return u
}

// ClearEmergencyName clears the value of the "emergency_name" field.
func (u *UserUpsert) ClearEmergencyName() *UserUpsert {
	u.SetNull(user.FieldEmergencyName)
	return u
}

// SetEmergencyNumber sets the "emergency_number" field.
func (u *UserUpsert) SetEmergencyNumber(v string) *UserUpsert {
	u.Set(user.FieldEmergencyNumber, v)
	return u
}

// UpdateEmergencyNumber sets the "emergency_number" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmergencyNumber() *UserUpsert {
	u.SetExcluded(user.FieldEmergencyNumber)
	return u
}

// ClearEmergencyNumber clears the value of the "emergency_number" field.
func (u *UserUpsert) ClearEmergencyNumber() *UserUpsert {
	u.SetNull(user.FieldEmergencyNumber)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsert) SetCreatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateCreatedAt() *UserUpsert {
	u.SetExcluded(user.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsert) SetUpdatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedAt() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedAt)
	return u
}

// SetExpose sets the "expose" field.
func (u *UserUpsert) SetExpose(v bool) *UserUpsert {
	u.Set(user.FieldExpose, v)
	return u
}

// UpdateExpose sets the "expose" field to the value that was provided on create.
func (u *UserUpsert) UpdateExpose() *UserUpsert {
	u.SetExcluded(user.FieldExpose)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetRun sets the "run" field.
func (u *UserUpsertOne) SetRun(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRun(v)
	})
}

// AddRun adds v to the "run" field.
func (u *UserUpsertOne) AddRun(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddRun(v)
	})
}

// UpdateRun sets the "run" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRun() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRun()
	})
}

// SetVerificationDigit sets the "verification_digit" field.
func (u *UserUpsertOne) SetVerificationDigit(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetVerificationDigit(v)
	})
}

// UpdateVerificationDigit sets the "verification_digit" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateVerificationDigit() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateVerificationDigit()
	})
}

// SetFirstName sets the "first_name" field.
func (u *UserUpsertOne) SetFirstName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateFirstName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFirstName()
	})
}

// ClearFirstName clears the value of the "first_name" field.
func (u *UserUpsertOne) ClearFirstName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *UserUpsertOne) SetLastName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastName()
	})
}

// ClearLastName clears the value of the "last_name" field.
func (u *UserUpsertOne) ClearLastName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastName()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *UserUpsertOne) SetPhoneNumber(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePhoneNumber() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhoneNumber()
	})
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (u *UserUpsertOne) ClearPhoneNumber() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPhoneNumber()
	})
}

// SetGender sets the "gender" field.
func (u *UserUpsertOne) SetGender(v user.Gender) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateGender() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGender()
	})
}

// SetMaritalStatus sets the "marital_status" field.
func (u *UserUpsertOne) SetMaritalStatus(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetMaritalStatus(v)
	})
}

// UpdateMaritalStatus sets the "marital_status" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateMaritalStatus() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMaritalStatus()
	})
}

// ClearMaritalStatus clears the value of the "marital_status" field.
func (u *UserUpsertOne) ClearMaritalStatus() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearMaritalStatus()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsertOne) ClearEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmail()
	})
}

// SetHomeAddress sets the "home_address" field.
func (u *UserUpsertOne) SetHomeAddress(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetHomeAddress(v)
	})
}

// UpdateHomeAddress sets the "home_address" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateHomeAddress() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHomeAddress()
	})
}

// ClearHomeAddress clears the value of the "home_address" field.
func (u *UserUpsertOne) ClearHomeAddress() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearHomeAddress()
	})
}

// SetCity sets the "city" field.
func (u *UserUpsertOne) SetCity(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCity() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCity()
	})
}

// ClearCity clears the value of the "city" field.
func (u *UserUpsertOne) ClearCity() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearCity()
	})
}

// SetBirthDate sets the "birth_date" field.
func (u *UserUpsertOne) SetBirthDate(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBirthDate(v)
	})
}

// UpdateBirthDate sets the "birth_date" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBirthDate() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBirthDate()
	})
}

// ClearBirthDate clears the value of the "birth_date" field.
func (u *UserUpsertOne) ClearBirthDate() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearBirthDate()
	})
}

// SetExpirationDate sets the "expiration_date" field.
func (u *UserUpsertOne) SetExpirationDate(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetExpirationDate(v)
	})
}

// UpdateExpirationDate sets the "expiration_date" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateExpirationDate() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateExpirationDate()
	})
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (u *UserUpsertOne) ClearExpirationDate() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearExpirationDate()
	})
}

// SetPlantType sets the "plant_type" field.
func (u *UserUpsertOne) SetPlantType(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPlantType(v)
	})
}

// UpdatePlantType sets the "plant_type" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePlantType() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePlantType()
	})
}

// ClearPlantType clears the value of the "plant_type" field.
func (u *UserUpsertOne) ClearPlantType() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPlantType()
	})
}

// SetEmergencyName sets the "emergency_name" field.
func (u *UserUpsertOne) SetEmergencyName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmergencyName(v)
	})
}

// UpdateEmergencyName sets the "emergency_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmergencyName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmergencyName()
	})
}

// ClearEmergencyName clears the value of the "emergency_name" field.
func (u *UserUpsertOne) ClearEmergencyName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmergencyName()
	})
}

// SetEmergencyNumber sets the "emergency_number" field.
func (u *UserUpsertOne) SetEmergencyNumber(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmergencyNumber(v)
	})
}

// UpdateEmergencyNumber sets the "emergency_number" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmergencyNumber() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmergencyNumber()
	})
}

// ClearEmergencyNumber clears the value of the "emergency_number" field.
func (u *UserUpsertOne) ClearEmergencyNumber() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmergencyNumber()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsertOne) SetCreatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCreatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertOne) SetUpdatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetExpose sets the "expose" field.
func (u *UserUpsertOne) SetExpose(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetExpose(v)
	})
}

// UpdateExpose sets the "expose" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateExpose() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateExpose()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetRun(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetRun sets the "run" field.
func (u *UserUpsertBulk) SetRun(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRun(v)
	})
}

// AddRun adds v to the "run" field.
func (u *UserUpsertBulk) AddRun(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddRun(v)
	})
}

// UpdateRun sets the "run" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRun() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRun()
	})
}

// SetVerificationDigit sets the "verification_digit" field.
func (u *UserUpsertBulk) SetVerificationDigit(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetVerificationDigit(v)
	})
}

// UpdateVerificationDigit sets the "verification_digit" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateVerificationDigit() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateVerificationDigit()
	})
}

// SetFirstName sets the "first_name" field.
func (u *UserUpsertBulk) SetFirstName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateFirstName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFirstName()
	})
}

// ClearFirstName clears the value of the "first_name" field.
func (u *UserUpsertBulk) ClearFirstName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *UserUpsertBulk) SetLastName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastName()
	})
}

// ClearLastName clears the value of the "last_name" field.
func (u *UserUpsertBulk) ClearLastName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastName()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *UserUpsertBulk) SetPhoneNumber(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePhoneNumber() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhoneNumber()
	})
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (u *UserUpsertBulk) ClearPhoneNumber() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPhoneNumber()
	})
}

// SetGender sets the "gender" field.
func (u *UserUpsertBulk) SetGender(v user.Gender) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateGender() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGender()
	})
}

// SetMaritalStatus sets the "marital_status" field.
func (u *UserUpsertBulk) SetMaritalStatus(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetMaritalStatus(v)
	})
}

// UpdateMaritalStatus sets the "marital_status" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateMaritalStatus() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMaritalStatus()
	})
}

// ClearMaritalStatus clears the value of the "marital_status" field.
func (u *UserUpsertBulk) ClearMaritalStatus() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearMaritalStatus()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsertBulk) ClearEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmail()
	})
}

// SetHomeAddress sets the "home_address" field.
func (u *UserUpsertBulk) SetHomeAddress(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetHomeAddress(v)
	})
}

// UpdateHomeAddress sets the "home_address" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateHomeAddress() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHomeAddress()
	})
}

// ClearHomeAddress clears the value of the "home_address" field.
func (u *UserUpsertBulk) ClearHomeAddress() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearHomeAddress()
	})
}

// SetCity sets the "city" field.
func (u *UserUpsertBulk) SetCity(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCity() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCity()
	})
}

// ClearCity clears the value of the "city" field.
func (u *UserUpsertBulk) ClearCity() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearCity()
	})
}

// SetBirthDate sets the "birth_date" field.
func (u *UserUpsertBulk) SetBirthDate(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBirthDate(v)
	})
}

// UpdateBirthDate sets the "birth_date" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBirthDate() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBirthDate()
	})
}

// ClearBirthDate clears the value of the "birth_date" field.
func (u *UserUpsertBulk) ClearBirthDate() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearBirthDate()
	})
}

// SetExpirationDate sets the "expiration_date" field.
func (u *UserUpsertBulk) SetExpirationDate(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetExpirationDate(v)
	})
}

// UpdateExpirationDate sets the "expiration_date" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateExpirationDate() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateExpirationDate()
	})
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (u *UserUpsertBulk) ClearExpirationDate() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearExpirationDate()
	})
}

// SetPlantType sets the "plant_type" field.
func (u *UserUpsertBulk) SetPlantType(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPlantType(v)
	})
}

// UpdatePlantType sets the "plant_type" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePlantType() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePlantType()
	})
}

// ClearPlantType clears the value of the "plant_type" field.
func (u *UserUpsertBulk) ClearPlantType() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPlantType()
	})
}

// SetEmergencyName sets the "emergency_name" field.
func (u *UserUpsertBulk) SetEmergencyName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmergencyName(v)
	})
}

// UpdateEmergencyName sets the "emergency_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmergencyName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmergencyName()
	})
}

// ClearEmergencyName clears the value of the "emergency_name" field.
func (u *UserUpsertBulk) ClearEmergencyName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmergencyName()
	})
}

// SetEmergencyNumber sets the "emergency_number" field.
func (u *UserUpsertBulk) SetEmergencyNumber(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmergencyNumber(v)
	})
}

// UpdateEmergencyNumber sets the "emergency_number" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmergencyNumber() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmergencyNumber()
	})
}

// ClearEmergencyNumber clears the value of the "emergency_number" field.
func (u *UserUpsertBulk) ClearEmergencyNumber() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmergencyNumber()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsertBulk) SetCreatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCreatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertBulk) SetUpdatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetExpose sets the "expose" field.
func (u *UserUpsertBulk) SetExpose(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetExpose(v)
	})
}

// UpdateExpose sets the "expose" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateExpose() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateExpose()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
