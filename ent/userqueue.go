// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"spl-users/ent/userqueue"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserQueue is the model entity for the UserQueue schema.
type UserQueue struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Run holds the value of the "run" field.
	Run int `json:"run,omitempty"`
	// VerificationDigit holds the value of the "verification_digit" field.
	VerificationDigit string `json:"verification_digit,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// FetchStatus holds the value of the "fetch_status" field.
	FetchStatus userqueue.FetchStatus `json:"fetch_status,omitempty"`
	// Status holds the value of the "status" field.
	Status       userqueue.Status `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserQueue) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userqueue.FieldID, userqueue.FieldRun:
			values[i] = new(sql.NullInt64)
		case userqueue.FieldVerificationDigit, userqueue.FieldFetchStatus, userqueue.FieldStatus:
			values[i] = new(sql.NullString)
		case userqueue.FieldCreatedAt, userqueue.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserQueue fields.
func (uq *UserQueue) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userqueue.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uq.ID = int(value.Int64)
		case userqueue.FieldRun:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field run", values[i])
			} else if value.Valid {
				uq.Run = int(value.Int64)
			}
		case userqueue.FieldVerificationDigit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field verification_digit", values[i])
			} else if value.Valid {
				uq.VerificationDigit = value.String
			}
		case userqueue.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uq.CreatedAt = value.Time
			}
		case userqueue.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uq.UpdatedAt = value.Time
			}
		case userqueue.FieldFetchStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fetch_status", values[i])
			} else if value.Valid {
				uq.FetchStatus = userqueue.FetchStatus(value.String)
			}
		case userqueue.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				uq.Status = userqueue.Status(value.String)
			}
		default:
			uq.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserQueue.
// This includes values selected through modifiers, order, etc.
func (uq *UserQueue) Value(name string) (ent.Value, error) {
	return uq.selectValues.Get(name)
}

// Update returns a builder for updating this UserQueue.
// Note that you need to call UserQueue.Unwrap() before calling this method if this UserQueue
// was returned from a transaction, and the transaction was committed or rolled back.
func (uq *UserQueue) Update() *UserQueueUpdateOne {
	return NewUserQueueClient(uq.config).UpdateOne(uq)
}

// Unwrap unwraps the UserQueue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uq *UserQueue) Unwrap() *UserQueue {
	_tx, ok := uq.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserQueue is not a transactional entity")
	}
	uq.config.driver = _tx.drv
	return uq
}

// String implements the fmt.Stringer.
func (uq *UserQueue) String() string {
	var builder strings.Builder
	builder.WriteString("UserQueue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uq.ID))
	builder.WriteString("run=")
	builder.WriteString(fmt.Sprintf("%v", uq.Run))
	builder.WriteString(", ")
	builder.WriteString("verification_digit=")
	builder.WriteString(uq.VerificationDigit)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(uq.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(uq.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("fetch_status=")
	builder.WriteString(fmt.Sprintf("%v", uq.FetchStatus))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", uq.Status))
	builder.WriteByte(')')
	return builder.String()
}

// UserQueues is a parsable slice of UserQueue.
type UserQueues []*UserQueue
