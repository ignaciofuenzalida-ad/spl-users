// Code generated by ent, DO NOT EDIT.

package user

import (
	"spl-users/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Run applies equality check predicate on the "run" field. It's identical to RunEQ.
func Run(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRun, v))
}

// VerificationDigit applies equality check predicate on the "verification_digit" field. It's identical to VerificationDigitEQ.
func VerificationDigit(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldVerificationDigit, v))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhoneNumber, v))
}

// MaritalStatus applies equality check predicate on the "marital_status" field. It's identical to MaritalStatusEQ.
func MaritalStatus(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMaritalStatus, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// HomeAddress applies equality check predicate on the "home_address" field. It's identical to HomeAddressEQ.
func HomeAddress(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHomeAddress, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCity, v))
}

// BirthDate applies equality check predicate on the "birth_date" field. It's identical to BirthDateEQ.
func BirthDate(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthDate, v))
}

// ExpirationDate applies equality check predicate on the "expiration_date" field. It's identical to ExpirationDateEQ.
func ExpirationDate(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldExpirationDate, v))
}

// PlantType applies equality check predicate on the "plant_type" field. It's identical to PlantTypeEQ.
func PlantType(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPlantType, v))
}

// EmergencyName applies equality check predicate on the "emergency_name" field. It's identical to EmergencyNameEQ.
func EmergencyName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmergencyName, v))
}

// EmergencyNumber applies equality check predicate on the "emergency_number" field. It's identical to EmergencyNumberEQ.
func EmergencyNumber(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmergencyNumber, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// Expose applies equality check predicate on the "expose" field. It's identical to ExposeEQ.
func Expose(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldExpose, v))
}

// RunEQ applies the EQ predicate on the "run" field.
func RunEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRun, v))
}

// RunNEQ applies the NEQ predicate on the "run" field.
func RunNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRun, v))
}

// RunIn applies the In predicate on the "run" field.
func RunIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldRun, vs...))
}

// RunNotIn applies the NotIn predicate on the "run" field.
func RunNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRun, vs...))
}

// RunGT applies the GT predicate on the "run" field.
func RunGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldRun, v))
}

// RunGTE applies the GTE predicate on the "run" field.
func RunGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRun, v))
}

// RunLT applies the LT predicate on the "run" field.
func RunLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldRun, v))
}

// RunLTE applies the LTE predicate on the "run" field.
func RunLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRun, v))
}

// VerificationDigitEQ applies the EQ predicate on the "verification_digit" field.
func VerificationDigitEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldVerificationDigit, v))
}

// VerificationDigitNEQ applies the NEQ predicate on the "verification_digit" field.
func VerificationDigitNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldVerificationDigit, v))
}

// VerificationDigitIn applies the In predicate on the "verification_digit" field.
func VerificationDigitIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldVerificationDigit, vs...))
}

// VerificationDigitNotIn applies the NotIn predicate on the "verification_digit" field.
func VerificationDigitNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldVerificationDigit, vs...))
}

// VerificationDigitGT applies the GT predicate on the "verification_digit" field.
func VerificationDigitGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldVerificationDigit, v))
}

// VerificationDigitGTE applies the GTE predicate on the "verification_digit" field.
func VerificationDigitGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldVerificationDigit, v))
}

// VerificationDigitLT applies the LT predicate on the "verification_digit" field.
func VerificationDigitLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldVerificationDigit, v))
}

// VerificationDigitLTE applies the LTE predicate on the "verification_digit" field.
func VerificationDigitLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldVerificationDigit, v))
}

// VerificationDigitContains applies the Contains predicate on the "verification_digit" field.
func VerificationDigitContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldVerificationDigit, v))
}

// VerificationDigitHasPrefix applies the HasPrefix predicate on the "verification_digit" field.
func VerificationDigitHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldVerificationDigit, v))
}

// VerificationDigitHasSuffix applies the HasSuffix predicate on the "verification_digit" field.
func VerificationDigitHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldVerificationDigit, v))
}

// VerificationDigitEqualFold applies the EqualFold predicate on the "verification_digit" field.
func VerificationDigitEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldVerificationDigit, v))
}

// VerificationDigitContainsFold applies the ContainsFold predicate on the "verification_digit" field.
func VerificationDigitContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldVerificationDigit, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameIsNil applies the IsNil predicate on the "first_name" field.
func FirstNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldFirstName))
}

// FirstNameNotNil applies the NotNil predicate on the "first_name" field.
func FirstNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldFirstName))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameIsNil applies the IsNil predicate on the "last_name" field.
func LastNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastName))
}

// LastNameNotNil applies the NotNil predicate on the "last_name" field.
func LastNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastName))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLastName, v))
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhoneNumber, v))
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPhoneNumber, vs...))
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPhoneNumber, vs...))
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPhoneNumber, v))
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPhoneNumber, v))
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPhoneNumber, v))
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPhoneNumber, v))
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPhoneNumber, v))
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPhoneNumber, v))
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPhoneNumber, v))
}

// PhoneNumberIsNil applies the IsNil predicate on the "phone_number" field.
func PhoneNumberIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPhoneNumber))
}

// PhoneNumberNotNil applies the NotNil predicate on the "phone_number" field.
func PhoneNumberNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPhoneNumber))
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPhoneNumber, v))
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPhoneNumber, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v Gender) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v Gender) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...Gender) predicate.User {
	return predicate.User(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...Gender) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGender, vs...))
}

// MaritalStatusEQ applies the EQ predicate on the "marital_status" field.
func MaritalStatusEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMaritalStatus, v))
}

// MaritalStatusNEQ applies the NEQ predicate on the "marital_status" field.
func MaritalStatusNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldMaritalStatus, v))
}

// MaritalStatusIn applies the In predicate on the "marital_status" field.
func MaritalStatusIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldMaritalStatus, vs...))
}

// MaritalStatusNotIn applies the NotIn predicate on the "marital_status" field.
func MaritalStatusNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldMaritalStatus, vs...))
}

// MaritalStatusGT applies the GT predicate on the "marital_status" field.
func MaritalStatusGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldMaritalStatus, v))
}

// MaritalStatusGTE applies the GTE predicate on the "marital_status" field.
func MaritalStatusGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldMaritalStatus, v))
}

// MaritalStatusLT applies the LT predicate on the "marital_status" field.
func MaritalStatusLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldMaritalStatus, v))
}

// MaritalStatusLTE applies the LTE predicate on the "marital_status" field.
func MaritalStatusLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldMaritalStatus, v))
}

// MaritalStatusContains applies the Contains predicate on the "marital_status" field.
func MaritalStatusContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldMaritalStatus, v))
}

// MaritalStatusHasPrefix applies the HasPrefix predicate on the "marital_status" field.
func MaritalStatusHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldMaritalStatus, v))
}

// MaritalStatusHasSuffix applies the HasSuffix predicate on the "marital_status" field.
func MaritalStatusHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldMaritalStatus, v))
}

// MaritalStatusIsNil applies the IsNil predicate on the "marital_status" field.
func MaritalStatusIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldMaritalStatus))
}

// MaritalStatusNotNil applies the NotNil predicate on the "marital_status" field.
func MaritalStatusNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldMaritalStatus))
}

// MaritalStatusEqualFold applies the EqualFold predicate on the "marital_status" field.
func MaritalStatusEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldMaritalStatus, v))
}

// MaritalStatusContainsFold applies the ContainsFold predicate on the "marital_status" field.
func MaritalStatusContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldMaritalStatus, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// HomeAddressEQ applies the EQ predicate on the "home_address" field.
func HomeAddressEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHomeAddress, v))
}

// HomeAddressNEQ applies the NEQ predicate on the "home_address" field.
func HomeAddressNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHomeAddress, v))
}

// HomeAddressIn applies the In predicate on the "home_address" field.
func HomeAddressIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldHomeAddress, vs...))
}

// HomeAddressNotIn applies the NotIn predicate on the "home_address" field.
func HomeAddressNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldHomeAddress, vs...))
}

// HomeAddressGT applies the GT predicate on the "home_address" field.
func HomeAddressGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldHomeAddress, v))
}

// HomeAddressGTE applies the GTE predicate on the "home_address" field.
func HomeAddressGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldHomeAddress, v))
}

// HomeAddressLT applies the LT predicate on the "home_address" field.
func HomeAddressLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldHomeAddress, v))
}

// HomeAddressLTE applies the LTE predicate on the "home_address" field.
func HomeAddressLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldHomeAddress, v))
}

// HomeAddressContains applies the Contains predicate on the "home_address" field.
func HomeAddressContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldHomeAddress, v))
}

// HomeAddressHasPrefix applies the HasPrefix predicate on the "home_address" field.
func HomeAddressHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldHomeAddress, v))
}

// HomeAddressHasSuffix applies the HasSuffix predicate on the "home_address" field.
func HomeAddressHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldHomeAddress, v))
}

// HomeAddressIsNil applies the IsNil predicate on the "home_address" field.
func HomeAddressIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldHomeAddress))
}

// HomeAddressNotNil applies the NotNil predicate on the "home_address" field.
func HomeAddressNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldHomeAddress))
}

// HomeAddressEqualFold applies the EqualFold predicate on the "home_address" field.
func HomeAddressEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldHomeAddress, v))
}

// HomeAddressContainsFold applies the ContainsFold predicate on the "home_address" field.
func HomeAddressContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldHomeAddress, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCity, v))
}

// CityIsNil applies the IsNil predicate on the "city" field.
func CityIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCity))
}

// CityNotNil applies the NotNil predicate on the "city" field.
func CityNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCity))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCity, v))
}

// BirthDateEQ applies the EQ predicate on the "birth_date" field.
func BirthDateEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthDate, v))
}

// BirthDateNEQ applies the NEQ predicate on the "birth_date" field.
func BirthDateNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBirthDate, v))
}

// BirthDateIn applies the In predicate on the "birth_date" field.
func BirthDateIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldBirthDate, vs...))
}

// BirthDateNotIn applies the NotIn predicate on the "birth_date" field.
func BirthDateNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBirthDate, vs...))
}

// BirthDateGT applies the GT predicate on the "birth_date" field.
func BirthDateGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldBirthDate, v))
}

// BirthDateGTE applies the GTE predicate on the "birth_date" field.
func BirthDateGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBirthDate, v))
}

// BirthDateLT applies the LT predicate on the "birth_date" field.
func BirthDateLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldBirthDate, v))
}

// BirthDateLTE applies the LTE predicate on the "birth_date" field.
func BirthDateLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBirthDate, v))
}

// BirthDateIsNil applies the IsNil predicate on the "birth_date" field.
func BirthDateIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBirthDate))
}

// BirthDateNotNil applies the NotNil predicate on the "birth_date" field.
func BirthDateNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBirthDate))
}

// ExpirationDateEQ applies the EQ predicate on the "expiration_date" field.
func ExpirationDateEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldExpirationDate, v))
}

// ExpirationDateNEQ applies the NEQ predicate on the "expiration_date" field.
func ExpirationDateNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldExpirationDate, v))
}

// ExpirationDateIn applies the In predicate on the "expiration_date" field.
func ExpirationDateIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldExpirationDate, vs...))
}

// ExpirationDateNotIn applies the NotIn predicate on the "expiration_date" field.
func ExpirationDateNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldExpirationDate, vs...))
}

// ExpirationDateGT applies the GT predicate on the "expiration_date" field.
func ExpirationDateGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldExpirationDate, v))
}

// ExpirationDateGTE applies the GTE predicate on the "expiration_date" field.
func ExpirationDateGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldExpirationDate, v))
}

// ExpirationDateLT applies the LT predicate on the "expiration_date" field.
func ExpirationDateLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldExpirationDate, v))
}

// ExpirationDateLTE applies the LTE predicate on the "expiration_date" field.
func ExpirationDateLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldExpirationDate, v))
}

// ExpirationDateIsNil applies the IsNil predicate on the "expiration_date" field.
func ExpirationDateIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldExpirationDate))
}

// ExpirationDateNotNil applies the NotNil predicate on the "expiration_date" field.
func ExpirationDateNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldExpirationDate))
}

// PlantTypeEQ applies the EQ predicate on the "plant_type" field.
func PlantTypeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPlantType, v))
}

// PlantTypeNEQ applies the NEQ predicate on the "plant_type" field.
func PlantTypeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPlantType, v))
}

// PlantTypeIn applies the In predicate on the "plant_type" field.
func PlantTypeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPlantType, vs...))
}

// PlantTypeNotIn applies the NotIn predicate on the "plant_type" field.
func PlantTypeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPlantType, vs...))
}

// PlantTypeGT applies the GT predicate on the "plant_type" field.
func PlantTypeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPlantType, v))
}

// PlantTypeGTE applies the GTE predicate on the "plant_type" field.
func PlantTypeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPlantType, v))
}

// PlantTypeLT applies the LT predicate on the "plant_type" field.
func PlantTypeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPlantType, v))
}

// PlantTypeLTE applies the LTE predicate on the "plant_type" field.
func PlantTypeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPlantType, v))
}

// PlantTypeContains applies the Contains predicate on the "plant_type" field.
func PlantTypeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPlantType, v))
}

// PlantTypeHasPrefix applies the HasPrefix predicate on the "plant_type" field.
func PlantTypeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPlantType, v))
}

// PlantTypeHasSuffix applies the HasSuffix predicate on the "plant_type" field.
func PlantTypeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPlantType, v))
}

// PlantTypeIsNil applies the IsNil predicate on the "plant_type" field.
func PlantTypeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPlantType))
}

// PlantTypeNotNil applies the NotNil predicate on the "plant_type" field.
func PlantTypeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPlantType))
}

// PlantTypeEqualFold applies the EqualFold predicate on the "plant_type" field.
func PlantTypeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPlantType, v))
}

// PlantTypeContainsFold applies the ContainsFold predicate on the "plant_type" field.
func PlantTypeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPlantType, v))
}

// EmergencyNameEQ applies the EQ predicate on the "emergency_name" field.
func EmergencyNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmergencyName, v))
}

// EmergencyNameNEQ applies the NEQ predicate on the "emergency_name" field.
func EmergencyNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmergencyName, v))
}

// EmergencyNameIn applies the In predicate on the "emergency_name" field.
func EmergencyNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmergencyName, vs...))
}

// EmergencyNameNotIn applies the NotIn predicate on the "emergency_name" field.
func EmergencyNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmergencyName, vs...))
}

// EmergencyNameGT applies the GT predicate on the "emergency_name" field.
func EmergencyNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmergencyName, v))
}

// EmergencyNameGTE applies the GTE predicate on the "emergency_name" field.
func EmergencyNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmergencyName, v))
}

// EmergencyNameLT applies the LT predicate on the "emergency_name" field.
func EmergencyNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmergencyName, v))
}

// EmergencyNameLTE applies the LTE predicate on the "emergency_name" field.
func EmergencyNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmergencyName, v))
}

// EmergencyNameContains applies the Contains predicate on the "emergency_name" field.
func EmergencyNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmergencyName, v))
}

// EmergencyNameHasPrefix applies the HasPrefix predicate on the "emergency_name" field.
func EmergencyNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmergencyName, v))
}

// EmergencyNameHasSuffix applies the HasSuffix predicate on the "emergency_name" field.
func EmergencyNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmergencyName, v))
}

// EmergencyNameIsNil applies the IsNil predicate on the "emergency_name" field.
func EmergencyNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmergencyName))
}

// EmergencyNameNotNil applies the NotNil predicate on the "emergency_name" field.
func EmergencyNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmergencyName))
}

// EmergencyNameEqualFold applies the EqualFold predicate on the "emergency_name" field.
func EmergencyNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmergencyName, v))
}

// EmergencyNameContainsFold applies the ContainsFold predicate on the "emergency_name" field.
func EmergencyNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmergencyName, v))
}

// EmergencyNumberEQ applies the EQ predicate on the "emergency_number" field.
func EmergencyNumberEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmergencyNumber, v))
}

// EmergencyNumberNEQ applies the NEQ predicate on the "emergency_number" field.
func EmergencyNumberNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmergencyNumber, v))
}

// EmergencyNumberIn applies the In predicate on the "emergency_number" field.
func EmergencyNumberIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmergencyNumber, vs...))
}

// EmergencyNumberNotIn applies the NotIn predicate on the "emergency_number" field.
func EmergencyNumberNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmergencyNumber, vs...))
}

// EmergencyNumberGT applies the GT predicate on the "emergency_number" field.
func EmergencyNumberGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmergencyNumber, v))
}

// EmergencyNumberGTE applies the GTE predicate on the "emergency_number" field.
func EmergencyNumberGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmergencyNumber, v))
}

// EmergencyNumberLT applies the LT predicate on the "emergency_number" field.
func EmergencyNumberLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmergencyNumber, v))
}

// EmergencyNumberLTE applies the LTE predicate on the "emergency_number" field.
func EmergencyNumberLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmergencyNumber, v))
}

// EmergencyNumberContains applies the Contains predicate on the "emergency_number" field.
func EmergencyNumberContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmergencyNumber, v))
}

// EmergencyNumberHasPrefix applies the HasPrefix predicate on the "emergency_number" field.
func EmergencyNumberHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmergencyNumber, v))
}

// EmergencyNumberHasSuffix applies the HasSuffix predicate on the "emergency_number" field.
func EmergencyNumberHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmergencyNumber, v))
}

// EmergencyNumberIsNil applies the IsNil predicate on the "emergency_number" field.
func EmergencyNumberIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmergencyNumber))
}

// EmergencyNumberNotNil applies the NotNil predicate on the "emergency_number" field.
func EmergencyNumberNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmergencyNumber))
}

// EmergencyNumberEqualFold applies the EqualFold predicate on the "emergency_number" field.
func EmergencyNumberEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmergencyNumber, v))
}

// EmergencyNumberContainsFold applies the ContainsFold predicate on the "emergency_number" field.
func EmergencyNumberContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmergencyNumber, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// ExposeEQ applies the EQ predicate on the "expose" field.
func ExposeEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldExpose, v))
}

// ExposeNEQ applies the NEQ predicate on the "expose" field.
func ExposeNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldExpose, v))
}

// HasLocations applies the HasEdge predicate on the "locations" edge.
func HasLocations() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, LocationsTable, LocationsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocationsWith applies the HasEdge predicate on the "locations" edge with a given conditions (other predicates).
func HasLocationsWith(preds ...predicate.Location) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newLocationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
