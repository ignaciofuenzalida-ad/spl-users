// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spl-users/ent/userqueue"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserQueueCreate is the builder for creating a UserQueue entity.
type UserQueueCreate struct {
	config
	mutation *UserQueueMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRun sets the "run" field.
func (uqc *UserQueueCreate) SetRun(i int) *UserQueueCreate {
	uqc.mutation.SetRun(i)
	return uqc
}

// SetVerificationDigit sets the "verification_digit" field.
func (uqc *UserQueueCreate) SetVerificationDigit(s string) *UserQueueCreate {
	uqc.mutation.SetVerificationDigit(s)
	return uqc
}

// SetCreatedAt sets the "created_at" field.
func (uqc *UserQueueCreate) SetCreatedAt(t time.Time) *UserQueueCreate {
	uqc.mutation.SetCreatedAt(t)
	return uqc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uqc *UserQueueCreate) SetNillableCreatedAt(t *time.Time) *UserQueueCreate {
	if t != nil {
		uqc.SetCreatedAt(*t)
	}
	return uqc
}

// SetUpdatedAt sets the "updated_at" field.
func (uqc *UserQueueCreate) SetUpdatedAt(t time.Time) *UserQueueCreate {
	uqc.mutation.SetUpdatedAt(t)
	return uqc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uqc *UserQueueCreate) SetNillableUpdatedAt(t *time.Time) *UserQueueCreate {
	if t != nil {
		uqc.SetUpdatedAt(*t)
	}
	return uqc
}

// SetFetchStatus sets the "fetch_status" field.
func (uqc *UserQueueCreate) SetFetchStatus(us userqueue.FetchStatus) *UserQueueCreate {
	uqc.mutation.SetFetchStatus(us)
	return uqc
}

// SetNillableFetchStatus sets the "fetch_status" field if the given value is not nil.
func (uqc *UserQueueCreate) SetNillableFetchStatus(us *userqueue.FetchStatus) *UserQueueCreate {
	if us != nil {
		uqc.SetFetchStatus(*us)
	}
	return uqc
}

// SetStatus sets the "status" field.
func (uqc *UserQueueCreate) SetStatus(u userqueue.Status) *UserQueueCreate {
	uqc.mutation.SetStatus(u)
	return uqc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uqc *UserQueueCreate) SetNillableStatus(u *userqueue.Status) *UserQueueCreate {
	if u != nil {
		uqc.SetStatus(*u)
	}
	return uqc
}

// Mutation returns the UserQueueMutation object of the builder.
func (uqc *UserQueueCreate) Mutation() *UserQueueMutation {
	return uqc.mutation
}

// Save creates the UserQueue in the database.
func (uqc *UserQueueCreate) Save(ctx context.Context) (*UserQueue, error) {
	uqc.defaults()
	return withHooks(ctx, uqc.sqlSave, uqc.mutation, uqc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uqc *UserQueueCreate) SaveX(ctx context.Context) *UserQueue {
	v, err := uqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uqc *UserQueueCreate) Exec(ctx context.Context) error {
	_, err := uqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uqc *UserQueueCreate) ExecX(ctx context.Context) {
	if err := uqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uqc *UserQueueCreate) defaults() {
	if _, ok := uqc.mutation.CreatedAt(); !ok {
		v := userqueue.DefaultCreatedAt()
		uqc.mutation.SetCreatedAt(v)
	}
	if _, ok := uqc.mutation.UpdatedAt(); !ok {
		v := userqueue.DefaultUpdatedAt()
		uqc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uqc.mutation.FetchStatus(); !ok {
		v := userqueue.DefaultFetchStatus
		uqc.mutation.SetFetchStatus(v)
	}
	if _, ok := uqc.mutation.Status(); !ok {
		v := userqueue.DefaultStatus
		uqc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uqc *UserQueueCreate) check() error {
	if _, ok := uqc.mutation.Run(); !ok {
		return &ValidationError{Name: "run", err: errors.New(`ent: missing required field "UserQueue.run"`)}
	}
	if v, ok := uqc.mutation.Run(); ok {
		if err := userqueue.RunValidator(v); err != nil {
			return &ValidationError{Name: "run", err: fmt.Errorf(`ent: validator failed for field "UserQueue.run": %w`, err)}
		}
	}
	if _, ok := uqc.mutation.VerificationDigit(); !ok {
		return &ValidationError{Name: "verification_digit", err: errors.New(`ent: missing required field "UserQueue.verification_digit"`)}
	}
	if v, ok := uqc.mutation.VerificationDigit(); ok {
		if err := userqueue.VerificationDigitValidator(v); err != nil {
			return &ValidationError{Name: "verification_digit", err: fmt.Errorf(`ent: validator failed for field "UserQueue.verification_digit": %w`, err)}
		}
	}
	if _, ok := uqc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserQueue.created_at"`)}
	}
	if _, ok := uqc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserQueue.updated_at"`)}
	}
	if _, ok := uqc.mutation.FetchStatus(); !ok {
		return &ValidationError{Name: "fetch_status", err: errors.New(`ent: missing required field "UserQueue.fetch_status"`)}
	}
	if v, ok := uqc.mutation.FetchStatus(); ok {
		if err := userqueue.FetchStatusValidator(v); err != nil {
			return &ValidationError{Name: "fetch_status", err: fmt.Errorf(`ent: validator failed for field "UserQueue.fetch_status": %w`, err)}
		}
	}
	if _, ok := uqc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "UserQueue.status"`)}
	}
	if v, ok := uqc.mutation.Status(); ok {
		if err := userqueue.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "UserQueue.status": %w`, err)}
		}
	}
	return nil
}

func (uqc *UserQueueCreate) sqlSave(ctx context.Context) (*UserQueue, error) {
	if err := uqc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uqc.mutation.id = &_node.ID
	uqc.mutation.done = true
	return _node, nil
}

func (uqc *UserQueueCreate) createSpec() (*UserQueue, *sqlgraph.CreateSpec) {
	var (
		_node = &UserQueue{config: uqc.config}
		_spec = sqlgraph.NewCreateSpec(userqueue.Table, sqlgraph.NewFieldSpec(userqueue.FieldID, field.TypeInt))
	)
	_spec.OnConflict = uqc.conflict
	if value, ok := uqc.mutation.Run(); ok {
		_spec.SetField(userqueue.FieldRun, field.TypeInt, value)
		_node.Run = value
	}
	if value, ok := uqc.mutation.VerificationDigit(); ok {
		_spec.SetField(userqueue.FieldVerificationDigit, field.TypeString, value)
		_node.VerificationDigit = value
	}
	if value, ok := uqc.mutation.CreatedAt(); ok {
		_spec.SetField(userqueue.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uqc.mutation.UpdatedAt(); ok {
		_spec.SetField(userqueue.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uqc.mutation.FetchStatus(); ok {
		_spec.SetField(userqueue.FieldFetchStatus, field.TypeEnum, value)
		_node.FetchStatus = value
	}
	if value, ok := uqc.mutation.Status(); ok {
		_spec.SetField(userqueue.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserQueue.Create().
//		SetRun(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserQueueUpsert) {
//			SetRun(v+v).
//		}).
//		Exec(ctx)
func (uqc *UserQueueCreate) OnConflict(opts ...sql.ConflictOption) *UserQueueUpsertOne {
	uqc.conflict = opts
	return &UserQueueUpsertOne{
		create: uqc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserQueue.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uqc *UserQueueCreate) OnConflictColumns(columns ...string) *UserQueueUpsertOne {
	uqc.conflict = append(uqc.conflict, sql.ConflictColumns(columns...))
	return &UserQueueUpsertOne{
		create: uqc,
	}
}

type (
	// UserQueueUpsertOne is the builder for "upsert"-ing
	//  one UserQueue node.
	UserQueueUpsertOne struct {
		create *UserQueueCreate
	}

	// UserQueueUpsert is the "OnConflict" setter.
	UserQueueUpsert struct {
		*sql.UpdateSet
	}
)

// SetRun sets the "run" field.
func (u *UserQueueUpsert) SetRun(v int) *UserQueueUpsert {
	u.Set(userqueue.FieldRun, v)
	return u
}

// UpdateRun sets the "run" field to the value that was provided on create.
func (u *UserQueueUpsert) UpdateRun() *UserQueueUpsert {
	u.SetExcluded(userqueue.FieldRun)
	return u
}

// AddRun adds v to the "run" field.
func (u *UserQueueUpsert) AddRun(v int) *UserQueueUpsert {
	u.Add(userqueue.FieldRun, v)
	return u
}

// SetVerificationDigit sets the "verification_digit" field.
func (u *UserQueueUpsert) SetVerificationDigit(v string) *UserQueueUpsert {
	u.Set(userqueue.FieldVerificationDigit, v)
	return u
}

// UpdateVerificationDigit sets the "verification_digit" field to the value that was provided on create.
func (u *UserQueueUpsert) UpdateVerificationDigit() *UserQueueUpsert {
	u.SetExcluded(userqueue.FieldVerificationDigit)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UserQueueUpsert) SetCreatedAt(v time.Time) *UserQueueUpsert {
	u.Set(userqueue.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserQueueUpsert) UpdateCreatedAt() *UserQueueUpsert {
	u.SetExcluded(userqueue.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserQueueUpsert) SetUpdatedAt(v time.Time) *UserQueueUpsert {
	u.Set(userqueue.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserQueueUpsert) UpdateUpdatedAt() *UserQueueUpsert {
	u.SetExcluded(userqueue.FieldUpdatedAt)
	return u
}

// SetFetchStatus sets the "fetch_status" field.
func (u *UserQueueUpsert) SetFetchStatus(v userqueue.FetchStatus) *UserQueueUpsert {
	u.Set(userqueue.FieldFetchStatus, v)
	return u
}

// UpdateFetchStatus sets the "fetch_status" field to the value that was provided on create.
func (u *UserQueueUpsert) UpdateFetchStatus() *UserQueueUpsert {
	u.SetExcluded(userqueue.FieldFetchStatus)
	return u
}

// SetStatus sets the "status" field.
func (u *UserQueueUpsert) SetStatus(v userqueue.Status) *UserQueueUpsert {
	u.Set(userqueue.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserQueueUpsert) UpdateStatus() *UserQueueUpsert {
	u.SetExcluded(userqueue.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserQueue.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserQueueUpsertOne) UpdateNewValues() *UserQueueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserQueue.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserQueueUpsertOne) Ignore() *UserQueueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserQueueUpsertOne) DoNothing() *UserQueueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserQueueCreate.OnConflict
// documentation for more info.
func (u *UserQueueUpsertOne) Update(set func(*UserQueueUpsert)) *UserQueueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserQueueUpsert{UpdateSet: update})
	}))
	return u
}

// SetRun sets the "run" field.
func (u *UserQueueUpsertOne) SetRun(v int) *UserQueueUpsertOne {
	return u.Update(func(s *UserQueueUpsert) {
		s.SetRun(v)
	})
}

// AddRun adds v to the "run" field.
func (u *UserQueueUpsertOne) AddRun(v int) *UserQueueUpsertOne {
	return u.Update(func(s *UserQueueUpsert) {
		s.AddRun(v)
	})
}

// UpdateRun sets the "run" field to the value that was provided on create.
func (u *UserQueueUpsertOne) UpdateRun() *UserQueueUpsertOne {
	return u.Update(func(s *UserQueueUpsert) {
		s.UpdateRun()
	})
}

// SetVerificationDigit sets the "verification_digit" field.
func (u *UserQueueUpsertOne) SetVerificationDigit(v string) *UserQueueUpsertOne {
	return u.Update(func(s *UserQueueUpsert) {
		s.SetVerificationDigit(v)
	})
}

// UpdateVerificationDigit sets the "verification_digit" field to the value that was provided on create.
func (u *UserQueueUpsertOne) UpdateVerificationDigit() *UserQueueUpsertOne {
	return u.Update(func(s *UserQueueUpsert) {
		s.UpdateVerificationDigit()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UserQueueUpsertOne) SetCreatedAt(v time.Time) *UserQueueUpsertOne {
	return u.Update(func(s *UserQueueUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserQueueUpsertOne) UpdateCreatedAt() *UserQueueUpsertOne {
	return u.Update(func(s *UserQueueUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserQueueUpsertOne) SetUpdatedAt(v time.Time) *UserQueueUpsertOne {
	return u.Update(func(s *UserQueueUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserQueueUpsertOne) UpdateUpdatedAt() *UserQueueUpsertOne {
	return u.Update(func(s *UserQueueUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetFetchStatus sets the "fetch_status" field.
func (u *UserQueueUpsertOne) SetFetchStatus(v userqueue.FetchStatus) *UserQueueUpsertOne {
	return u.Update(func(s *UserQueueUpsert) {
		s.SetFetchStatus(v)
	})
}

// UpdateFetchStatus sets the "fetch_status" field to the value that was provided on create.
func (u *UserQueueUpsertOne) UpdateFetchStatus() *UserQueueUpsertOne {
	return u.Update(func(s *UserQueueUpsert) {
		s.UpdateFetchStatus()
	})
}

// SetStatus sets the "status" field.
func (u *UserQueueUpsertOne) SetStatus(v userqueue.Status) *UserQueueUpsertOne {
	return u.Update(func(s *UserQueueUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserQueueUpsertOne) UpdateStatus() *UserQueueUpsertOne {
	return u.Update(func(s *UserQueueUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *UserQueueUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserQueueCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserQueueUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserQueueUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserQueueUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserQueueCreateBulk is the builder for creating many UserQueue entities in bulk.
type UserQueueCreateBulk struct {
	config
	err      error
	builders []*UserQueueCreate
	conflict []sql.ConflictOption
}

// Save creates the UserQueue entities in the database.
func (uqcb *UserQueueCreateBulk) Save(ctx context.Context) ([]*UserQueue, error) {
	if uqcb.err != nil {
		return nil, uqcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uqcb.builders))
	nodes := make([]*UserQueue, len(uqcb.builders))
	mutators := make([]Mutator, len(uqcb.builders))
	for i := range uqcb.builders {
		func(i int, root context.Context) {
			builder := uqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserQueueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uqcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uqcb *UserQueueCreateBulk) SaveX(ctx context.Context) []*UserQueue {
	v, err := uqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uqcb *UserQueueCreateBulk) Exec(ctx context.Context) error {
	_, err := uqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uqcb *UserQueueCreateBulk) ExecX(ctx context.Context) {
	if err := uqcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserQueue.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserQueueUpsert) {
//			SetRun(v+v).
//		}).
//		Exec(ctx)
func (uqcb *UserQueueCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserQueueUpsertBulk {
	uqcb.conflict = opts
	return &UserQueueUpsertBulk{
		create: uqcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserQueue.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uqcb *UserQueueCreateBulk) OnConflictColumns(columns ...string) *UserQueueUpsertBulk {
	uqcb.conflict = append(uqcb.conflict, sql.ConflictColumns(columns...))
	return &UserQueueUpsertBulk{
		create: uqcb,
	}
}

// UserQueueUpsertBulk is the builder for "upsert"-ing
// a bulk of UserQueue nodes.
type UserQueueUpsertBulk struct {
	create *UserQueueCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserQueue.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserQueueUpsertBulk) UpdateNewValues() *UserQueueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserQueue.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserQueueUpsertBulk) Ignore() *UserQueueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserQueueUpsertBulk) DoNothing() *UserQueueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserQueueCreateBulk.OnConflict
// documentation for more info.
func (u *UserQueueUpsertBulk) Update(set func(*UserQueueUpsert)) *UserQueueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserQueueUpsert{UpdateSet: update})
	}))
	return u
}

// SetRun sets the "run" field.
func (u *UserQueueUpsertBulk) SetRun(v int) *UserQueueUpsertBulk {
	return u.Update(func(s *UserQueueUpsert) {
		s.SetRun(v)
	})
}

// AddRun adds v to the "run" field.
func (u *UserQueueUpsertBulk) AddRun(v int) *UserQueueUpsertBulk {
	return u.Update(func(s *UserQueueUpsert) {
		s.AddRun(v)
	})
}

// UpdateRun sets the "run" field to the value that was provided on create.
func (u *UserQueueUpsertBulk) UpdateRun() *UserQueueUpsertBulk {
	return u.Update(func(s *UserQueueUpsert) {
		s.UpdateRun()
	})
}

// SetVerificationDigit sets the "verification_digit" field.
func (u *UserQueueUpsertBulk) SetVerificationDigit(v string) *UserQueueUpsertBulk {
	return u.Update(func(s *UserQueueUpsert) {
		s.SetVerificationDigit(v)
	})
}

// UpdateVerificationDigit sets the "verification_digit" field to the value that was provided on create.
func (u *UserQueueUpsertBulk) UpdateVerificationDigit() *UserQueueUpsertBulk {
	return u.Update(func(s *UserQueueUpsert) {
		s.UpdateVerificationDigit()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UserQueueUpsertBulk) SetCreatedAt(v time.Time) *UserQueueUpsertBulk {
	return u.Update(func(s *UserQueueUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserQueueUpsertBulk) UpdateCreatedAt() *UserQueueUpsertBulk {
	return u.Update(func(s *UserQueueUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserQueueUpsertBulk) SetUpdatedAt(v time.Time) *UserQueueUpsertBulk {
	return u.Update(func(s *UserQueueUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserQueueUpsertBulk) UpdateUpdatedAt() *UserQueueUpsertBulk {
	return u.Update(func(s *UserQueueUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetFetchStatus sets the "fetch_status" field.
func (u *UserQueueUpsertBulk) SetFetchStatus(v userqueue.FetchStatus) *UserQueueUpsertBulk {
	return u.Update(func(s *UserQueueUpsert) {
		s.SetFetchStatus(v)
	})
}

// UpdateFetchStatus sets the "fetch_status" field to the value that was provided on create.
func (u *UserQueueUpsertBulk) UpdateFetchStatus() *UserQueueUpsertBulk {
	return u.Update(func(s *UserQueueUpsert) {
		s.UpdateFetchStatus()
	})
}

// SetStatus sets the "status" field.
func (u *UserQueueUpsertBulk) SetStatus(v userqueue.Status) *UserQueueUpsertBulk {
	return u.Update(func(s *UserQueueUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserQueueUpsertBulk) UpdateStatus() *UserQueueUpsertBulk {
	return u.Update(func(s *UserQueueUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *UserQueueUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserQueueCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserQueueCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserQueueUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
